// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - integrates with Clerk

model User {
  id      String @id @default(cuid())
  clerkId   String   @unique // Clerk user ID
  email   String @unique
  name    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  groupMemberships GroupMember[] // Groups the user belongs to

  expensesCreated Expense[] // Expenses created by this user

  expensePayments ExpensePayment[] // Payments made for expenses

  expenseShares ExpenseShare[]  // Expense participants (what user owes/is owed)

  paymentsMade Payment[] @relation("PaymentPaidBy")  // Payments made by this user

  paymentsReceived Payment[] @relation("PaymentReceivedBy")  // Payments received by this user
  
  activities Activity[]  // Activities related to this user

  groupsCreated    Group[]   @relation("GroupCreatedBy")

  @@map("users")
}


// Group model - for organizing expenses among friends/roommates

model Group {
  id String @id @default(cuid())
  name String 
  description String?
  imageUrl String?
  createdAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User @relation("GroupCreatedBy", fields: [createdById], references: [id])
  members  GroupMember[] // Group members
  expenses Expense[]  // Expenses in this group

  @@map("groups")
}


// Junction table for group memberships

model GroupMember {
  id String @id @default(cuid())
  userId String
  groupId String
  role GroupRole @default(MEMBER)
  joinedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("group_members")
}

enum GroupRole {
  ADMIN
  MEMBER
}


// Expense payments - tracks who paid how much for each expense

model ExpensePayment {
  id String @id @default(cuid())
  expenseId String
  userId String
  amount Decimal @db.Decimal(10, 2) // Amount this user paid

  expense Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([expenseId, userId])
  @@map("expense_payments")
}

// Main expense model

model Expense {
  id String @id @default(cuid())
  title String
  description String?
  amount Decimal     @db.Decimal(10, 2) // Total expense amount
  currency    String      @default("RS")
  category ExpenseCategory @default(OTHER)

  // Who created this expense (for tracking purposes)
  createdById String
  createdBy   User        @relation(fields: [createdById], references: [id])

  // Group this expense belongs to (optional - can be personal)
  groupId     String?
  group       Group?      @relation(fields: [groupId], references: [id])

  // Split configuration
  splitType   SplitType   @default(EQUAL)

  // Who paid for this expense (supports multiple payers)
  payments    ExpensePayment[]

  // Individual shares for each participant (who owes what)
  shares      ExpenseShare[]

  // Receipt/proof
  receiptUrl  String?

  // Date of expense
  expenseDate DateTime    @default(now())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Related activities
  activities  Activity[]


@@map("expenses")
}

// Individual expense shares - who owes what

model ExpenseShare {
  id String @id @default(cuid())
  expenseId String
  userId String

  amount Decimal @db.Decimal(10, 2) // Amount this user owes for this expense

  isSettled Boolean @default(false) // Whether this user has settled their share

  expense Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([expenseId, userId])
  @@map("expense_shares")
}

// Payment settlements between users

model Payment {
  id String @id @default(cuid())
  amount Decimal @db.Decimal(10, 2)
  currency    String      @default("RS")
 
//  Who paid

paidById      String
paidBy        User        @relation("PaymentPaidBy", fields: [paidById], references: [id])

// Who received the payment
receivedById   String   
receivedBy     User       @relation("PaymentReceivedBy", fields: [receivedById], references: [id])

// Optional: reference to specific expense shares being settled
description  String?

// Payment method/notes
paymentMethod    PaymentMethod   @default(UPI)
notes            String?

createdAt        DateTime        @default(now())

// Related activities
activities       Activity[]

@@map("payments")
}

// Activity log for tracking all actions

model Activity {
  id                String        @id @default(cuid())
  type              ActivityType
  description       String

  // Who performed this action
   userId           String
   user             User          @relation(fields: [userId], references: [id])

  // Related records (optional)
  expenseId   String?
  expense     Expense?     @relation(fields: [expenseId], references: [id])
  
  paymentId   String?
  payment     Payment?     @relation(fields: [paymentId], references: [id])

  createdAt   DateTime     @default(now())

  @@map("activities")
}

// Enums

enum SplitType {
  EQUAL     // Split equally among all participants
  UNEQUAL   // Custom amounts for each participant
  PERCENTAGE // Split by percentages
  SHARES    // Split by shares/units
}

enum ExpenseCategory {
  FOOD
  TRANSPORTATION
  SHOPPING
  ENTERTAINMENT
  UTILITIES
  RENT
  GROCERIES
  TRAVEL
  HEALTHCARE
  OTHER
}

enum PaymentMethod {
  CASH
  UPI
  CREDIT_CARD
  OTHER
}

enum ActivityType {
  EXPENSE_CREATED
  EXPENSE_UPDATED
  EXPENSE_DELETED
  PAYMENT_MADE
  USER_JOINED_GROUP
  USER_LEFT_GROUP
  GROUP_CREATED
  GROUP_UPDATED
}